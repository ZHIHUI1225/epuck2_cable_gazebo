<?xml version="1.0"?>
<robot>
 <!-- *********************** WHEEL ODOMETRY ***************************    -->
  <!--skid_steer_drive_controller-->
  <gazebo>
    <plugin name="two_wheeled_robot_diff_drive" filename="libgazebo_ros_diff_drive.so">
 	<ros>
 	<!-- <namespace>/Epuck2</namespace> -->
 	</ros>
      <update_rate>100</update_rate>
      
      <!-- wheels -->
      <left_joint>left_joint</left_joint>
      <right_joint>right_joint</right_joint>
 
      <!-- kinematics -->
      <wheel_separation>0.05398</wheel_separation>
      <wheel_diameter>0.040</wheel_diameter>
 
      <!-- limits -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>
 
      <!-- Receive velocity commands on this ROS topic -->
      <command_topic>epuck2/cmd_vel</command_topic>
 
      <!-- output -->
      <!-- When false, publish no wheel odometry data to a ROS topic -->
      <publish_odom>true</publish_odom>
 
      <!-- When true, publish coordinate transform from odom to base_footprint -->
      <!-- I usually use the robot_localization package to publish this transform -->  
      <publish_odom_tf>false</publish_odom_tf>
     
      <!-- When true, publish coordinate transform from base_link to the wheels -->
      <!-- The robot_state_publisher package is often used to publish this transform -->  
      <publish_wheel_tf>true</publish_wheel_tf>
 
      <odometry_topic>puck2/odom_diffdrive</odometry_topic>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
 
      <odometry_source>1</odometry_source>
      <ros>
        <remapping>odom:=wheel/odometry</remapping>
      </ros>
    </plugin>
  </gazebo>
  
 <!-- *********************** LIDAR SETUP **********************************  -->
 
  <gazebo reference="base_laser">
    <sensor type="ray" name="head_hokuyo_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <update_rate>30</update_rate>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <namespace>/epuck2</namespace>
          <argument>~/out:=scan</argument>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="base_laser_joint">
    <mu1>0.01</mu1>
    <mu2>0.01</mu2>
    <material>Gazebo/Black</material>
  </gazebo>
<!--*********************** DRIVE WHEELS ******************************  -->
  
  <gazebo reference="right_wheel">
    <selfCollide>true</selfCollide>
    <mu1>10</mu1>
    <mu2>10</mu2>
</gazebo>


  
<gazebo reference="left_wheel">
    <selfCollide>true</selfCollide>
    <mu1>10</mu1>
    <mu2>10</mu2>
</gazebo>

<transmission name ="right_motor_t">
 <type>transmission_interface/SimpleTransmission</type>
 <joint name="right_joint">
  <hardwareInterface>EffortJointInterface</hardwareInterface>
 </joint>
 <actuator name="right_motor_m">
  <hardwareInterface>EffortJointInterface</hardwareInterface>
 <mechanicalReduction>50</mechanicalReduction>
 </actuator>
</transmission>

<transmission name ="left_motor_t">
 <type>transmission_interface/SimpleTransmission</type>
 <joint name="left_joint">
  <hardwareInterface>EffortJointInterface</hardwareInterface>
 </joint>
 <actuator name="left_motor_m">
  <hardwareInterface>EffortJointInterface</hardwareInterface>
 <mechanicalReduction>50</mechanicalReduction>
 </actuator>
</transmission>


<!--***********************base control ********************************
<gazebo>
  <plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
    <alwaysOn>true</alwaysOn>
    <updateRate>100.0</updateRate>
    <bodyName>base_link</bodyName>
    <topicName>position</topicName>
    <gaussianNoise>0</gaussianNoise>
    <frameName>map</frameName>
    <xyzOffsets>0 0 0</xyzOffsets> 
    <rpyOffsets>0 0 0</rpyOffsets>
  </plugin>
</gazebo>-->

  <!-- ros_control plugin
  <gazebo>
    <plugin name="gazebo_ros_control"
            filename="libgazebo_ros_control.so">
      <robotNamespace>/epuck</robotNamespace>
      <robotParam>/robot_description</robotParam>
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
    </plugin>
  </gazebo> -->
  
<!--***************************ros control**********************
<gazebo>
  <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
   <robotNamespace>/epuck2</robotNamespace>
   <alwaysOn>true</alwaysOn>
   <updateRate>1000.0</updateRate>
  </plugin>
</gazebo>-->

</robot>
